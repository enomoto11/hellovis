// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hellovis/ent/student"
	"hellovis/ent/studentcheckin"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// StudentCheckin is the model entity for the StudentCheckin schema.
type StudentCheckin struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID uuid.UUID `json:"student_id,omitempty"`
	// CheckinAt holds the value of the "checkin_at" field.
	CheckinAt time.Time `json:"checkin_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentCheckinQuery when eager-loading is set.
	Edges        StudentCheckinEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StudentCheckinEdges holds the relations/edges for other nodes in the graph.
type StudentCheckinEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentCheckinEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudentCheckin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case studentcheckin.FieldCreatedAt, studentcheckin.FieldUpdatedAt, studentcheckin.FieldDeletedAt, studentcheckin.FieldCheckinAt:
			values[i] = new(sql.NullTime)
		case studentcheckin.FieldID, studentcheckin.FieldStudentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudentCheckin fields.
func (sc *StudentCheckin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studentcheckin.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case studentcheckin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case studentcheckin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case studentcheckin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sc.DeletedAt = value.Time
			}
		case studentcheckin.FieldStudentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value != nil {
				sc.StudentID = *value
			}
		case studentcheckin.FieldCheckinAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field checkin_at", values[i])
			} else if value.Valid {
				sc.CheckinAt = value.Time
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StudentCheckin.
// This includes values selected through modifiers, order, etc.
func (sc *StudentCheckin) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryStudent queries the "student" edge of the StudentCheckin entity.
func (sc *StudentCheckin) QueryStudent() *StudentQuery {
	return NewStudentCheckinClient(sc.config).QueryStudent(sc)
}

// Update returns a builder for updating this StudentCheckin.
// Note that you need to call StudentCheckin.Unwrap() before calling this method if this StudentCheckin
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *StudentCheckin) Update() *StudentCheckinUpdateOne {
	return NewStudentCheckinClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the StudentCheckin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *StudentCheckin) Unwrap() *StudentCheckin {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudentCheckin is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *StudentCheckin) String() string {
	var builder strings.Builder
	builder.WriteString("StudentCheckin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.StudentID))
	builder.WriteString(", ")
	builder.WriteString("checkin_at=")
	builder.WriteString(sc.CheckinAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StudentCheckins is a parsable slice of StudentCheckin.
type StudentCheckins []*StudentCheckin

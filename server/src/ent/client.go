// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"hellovis/ent/migrate"

	"hellovis/ent/student"
	"hellovis/ent/studentcheckin"
	"hellovis/ent/studentcheckout"
	"hellovis/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Student is the client for interacting with the Student builders.
	Student *StudentClient
	// StudentCheckin is the client for interacting with the StudentCheckin builders.
	StudentCheckin *StudentCheckinClient
	// StudentCheckout is the client for interacting with the StudentCheckout builders.
	StudentCheckout *StudentCheckoutClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Student = NewStudentClient(c.config)
	c.StudentCheckin = NewStudentCheckinClient(c.config)
	c.StudentCheckout = NewStudentCheckoutClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Student:         NewStudentClient(cfg),
		StudentCheckin:  NewStudentCheckinClient(cfg),
		StudentCheckout: NewStudentCheckoutClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Student:         NewStudentClient(cfg),
		StudentCheckin:  NewStudentCheckinClient(cfg),
		StudentCheckout: NewStudentCheckoutClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Student.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Student.Use(hooks...)
	c.StudentCheckin.Use(hooks...)
	c.StudentCheckout.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Student.Intercept(interceptors...)
	c.StudentCheckin.Intercept(interceptors...)
	c.StudentCheckout.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *StudentMutation:
		return c.Student.mutate(ctx, m)
	case *StudentCheckinMutation:
		return c.StudentCheckin.mutate(ctx, m)
	case *StudentCheckoutMutation:
		return c.StudentCheckout.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// StudentClient is a client for the Student schema.
type StudentClient struct {
	config
}

// NewStudentClient returns a client for the Student from the given config.
func NewStudentClient(c config) *StudentClient {
	return &StudentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `student.Hooks(f(g(h())))`.
func (c *StudentClient) Use(hooks ...Hook) {
	c.hooks.Student = append(c.hooks.Student, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `student.Intercept(f(g(h())))`.
func (c *StudentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Student = append(c.inters.Student, interceptors...)
}

// Create returns a builder for creating a Student entity.
func (c *StudentClient) Create() *StudentCreate {
	mutation := newStudentMutation(c.config, OpCreate)
	return &StudentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Student entities.
func (c *StudentClient) CreateBulk(builders ...*StudentCreate) *StudentCreateBulk {
	return &StudentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Student.
func (c *StudentClient) Update() *StudentUpdate {
	mutation := newStudentMutation(c.config, OpUpdate)
	return &StudentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentClient) UpdateOne(s *Student) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudent(s))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentClient) UpdateOneID(id uuid.UUID) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudentID(id))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Student.
func (c *StudentClient) Delete() *StudentDelete {
	mutation := newStudentMutation(c.config, OpDelete)
	return &StudentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudentClient) DeleteOne(s *Student) *StudentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudentClient) DeleteOneID(id uuid.UUID) *StudentDeleteOne {
	builder := c.Delete().Where(student.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentDeleteOne{builder}
}

// Query returns a query builder for Student.
func (c *StudentClient) Query() *StudentQuery {
	return &StudentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudent},
		inters: c.Interceptors(),
	}
}

// Get returns a Student entity by its id.
func (c *StudentClient) Get(ctx context.Context, id uuid.UUID) (*Student, error) {
	return c.Query().Where(student.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentClient) GetX(ctx context.Context, id uuid.UUID) *Student {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheckins queries the checkins edge of a Student.
func (c *StudentClient) QueryCheckins(s *Student) *StudentCheckinQuery {
	query := (&StudentCheckinClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(studentcheckin.Table, studentcheckin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.CheckinsTable, student.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckouts queries the checkouts edge of a Student.
func (c *StudentClient) QueryCheckouts(s *Student) *StudentCheckoutQuery {
	query := (&StudentCheckoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(studentcheckout.Table, studentcheckout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.CheckoutsTable, student.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentClient) Hooks() []Hook {
	return c.hooks.Student
}

// Interceptors returns the client interceptors.
func (c *StudentClient) Interceptors() []Interceptor {
	return c.inters.Student
}

func (c *StudentClient) mutate(ctx context.Context, m *StudentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Student mutation op: %q", m.Op())
	}
}

// StudentCheckinClient is a client for the StudentCheckin schema.
type StudentCheckinClient struct {
	config
}

// NewStudentCheckinClient returns a client for the StudentCheckin from the given config.
func NewStudentCheckinClient(c config) *StudentCheckinClient {
	return &StudentCheckinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studentcheckin.Hooks(f(g(h())))`.
func (c *StudentCheckinClient) Use(hooks ...Hook) {
	c.hooks.StudentCheckin = append(c.hooks.StudentCheckin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `studentcheckin.Intercept(f(g(h())))`.
func (c *StudentCheckinClient) Intercept(interceptors ...Interceptor) {
	c.inters.StudentCheckin = append(c.inters.StudentCheckin, interceptors...)
}

// Create returns a builder for creating a StudentCheckin entity.
func (c *StudentCheckinClient) Create() *StudentCheckinCreate {
	mutation := newStudentCheckinMutation(c.config, OpCreate)
	return &StudentCheckinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudentCheckin entities.
func (c *StudentCheckinClient) CreateBulk(builders ...*StudentCheckinCreate) *StudentCheckinCreateBulk {
	return &StudentCheckinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudentCheckin.
func (c *StudentCheckinClient) Update() *StudentCheckinUpdate {
	mutation := newStudentCheckinMutation(c.config, OpUpdate)
	return &StudentCheckinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentCheckinClient) UpdateOne(sc *StudentCheckin) *StudentCheckinUpdateOne {
	mutation := newStudentCheckinMutation(c.config, OpUpdateOne, withStudentCheckin(sc))
	return &StudentCheckinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentCheckinClient) UpdateOneID(id uuid.UUID) *StudentCheckinUpdateOne {
	mutation := newStudentCheckinMutation(c.config, OpUpdateOne, withStudentCheckinID(id))
	return &StudentCheckinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudentCheckin.
func (c *StudentCheckinClient) Delete() *StudentCheckinDelete {
	mutation := newStudentCheckinMutation(c.config, OpDelete)
	return &StudentCheckinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudentCheckinClient) DeleteOne(sc *StudentCheckin) *StudentCheckinDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudentCheckinClient) DeleteOneID(id uuid.UUID) *StudentCheckinDeleteOne {
	builder := c.Delete().Where(studentcheckin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentCheckinDeleteOne{builder}
}

// Query returns a query builder for StudentCheckin.
func (c *StudentCheckinClient) Query() *StudentCheckinQuery {
	return &StudentCheckinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudentCheckin},
		inters: c.Interceptors(),
	}
}

// Get returns a StudentCheckin entity by its id.
func (c *StudentCheckinClient) Get(ctx context.Context, id uuid.UUID) (*StudentCheckin, error) {
	return c.Query().Where(studentcheckin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentCheckinClient) GetX(ctx context.Context, id uuid.UUID) *StudentCheckin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudent queries the student edge of a StudentCheckin.
func (c *StudentCheckinClient) QueryStudent(sc *StudentCheckin) *StudentQuery {
	query := (&StudentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentcheckin.Table, studentcheckin.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentcheckin.StudentTable, studentcheckin.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentCheckinClient) Hooks() []Hook {
	return c.hooks.StudentCheckin
}

// Interceptors returns the client interceptors.
func (c *StudentCheckinClient) Interceptors() []Interceptor {
	return c.inters.StudentCheckin
}

func (c *StudentCheckinClient) mutate(ctx context.Context, m *StudentCheckinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudentCheckinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudentCheckinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudentCheckinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudentCheckinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StudentCheckin mutation op: %q", m.Op())
	}
}

// StudentCheckoutClient is a client for the StudentCheckout schema.
type StudentCheckoutClient struct {
	config
}

// NewStudentCheckoutClient returns a client for the StudentCheckout from the given config.
func NewStudentCheckoutClient(c config) *StudentCheckoutClient {
	return &StudentCheckoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studentcheckout.Hooks(f(g(h())))`.
func (c *StudentCheckoutClient) Use(hooks ...Hook) {
	c.hooks.StudentCheckout = append(c.hooks.StudentCheckout, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `studentcheckout.Intercept(f(g(h())))`.
func (c *StudentCheckoutClient) Intercept(interceptors ...Interceptor) {
	c.inters.StudentCheckout = append(c.inters.StudentCheckout, interceptors...)
}

// Create returns a builder for creating a StudentCheckout entity.
func (c *StudentCheckoutClient) Create() *StudentCheckoutCreate {
	mutation := newStudentCheckoutMutation(c.config, OpCreate)
	return &StudentCheckoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudentCheckout entities.
func (c *StudentCheckoutClient) CreateBulk(builders ...*StudentCheckoutCreate) *StudentCheckoutCreateBulk {
	return &StudentCheckoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudentCheckout.
func (c *StudentCheckoutClient) Update() *StudentCheckoutUpdate {
	mutation := newStudentCheckoutMutation(c.config, OpUpdate)
	return &StudentCheckoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentCheckoutClient) UpdateOne(sc *StudentCheckout) *StudentCheckoutUpdateOne {
	mutation := newStudentCheckoutMutation(c.config, OpUpdateOne, withStudentCheckout(sc))
	return &StudentCheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentCheckoutClient) UpdateOneID(id uuid.UUID) *StudentCheckoutUpdateOne {
	mutation := newStudentCheckoutMutation(c.config, OpUpdateOne, withStudentCheckoutID(id))
	return &StudentCheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudentCheckout.
func (c *StudentCheckoutClient) Delete() *StudentCheckoutDelete {
	mutation := newStudentCheckoutMutation(c.config, OpDelete)
	return &StudentCheckoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudentCheckoutClient) DeleteOne(sc *StudentCheckout) *StudentCheckoutDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudentCheckoutClient) DeleteOneID(id uuid.UUID) *StudentCheckoutDeleteOne {
	builder := c.Delete().Where(studentcheckout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentCheckoutDeleteOne{builder}
}

// Query returns a query builder for StudentCheckout.
func (c *StudentCheckoutClient) Query() *StudentCheckoutQuery {
	return &StudentCheckoutQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudentCheckout},
		inters: c.Interceptors(),
	}
}

// Get returns a StudentCheckout entity by its id.
func (c *StudentCheckoutClient) Get(ctx context.Context, id uuid.UUID) (*StudentCheckout, error) {
	return c.Query().Where(studentcheckout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentCheckoutClient) GetX(ctx context.Context, id uuid.UUID) *StudentCheckout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudent queries the student edge of a StudentCheckout.
func (c *StudentCheckoutClient) QueryStudent(sc *StudentCheckout) *StudentQuery {
	query := (&StudentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentcheckout.Table, studentcheckout.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentcheckout.StudentTable, studentcheckout.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentCheckoutClient) Hooks() []Hook {
	return c.hooks.StudentCheckout
}

// Interceptors returns the client interceptors.
func (c *StudentCheckoutClient) Interceptors() []Interceptor {
	return c.inters.StudentCheckout
}

func (c *StudentCheckoutClient) mutate(ctx context.Context, m *StudentCheckoutMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudentCheckoutCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudentCheckoutUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudentCheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudentCheckoutDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StudentCheckout mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Student, StudentCheckin, StudentCheckout, User []ent.Hook
	}
	inters struct {
		Student, StudentCheckin, StudentCheckout, User []ent.Interceptor
	}
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hellovis/ent/predicate"
	"hellovis/ent/student"
	"hellovis/ent/studentcheckin"
	"hellovis/ent/studentcheckout"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StudentUpdate) SetUpdatedAt(t time.Time) *StudentUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StudentUpdate) SetDeletedAt(t time.Time) *StudentUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetLastName sets the "last_name" field.
func (su *StudentUpdate) SetLastName(s string) *StudentUpdate {
	su.mutation.SetLastName(s)
	return su
}

// SetFirstName sets the "first_name" field.
func (su *StudentUpdate) SetFirstName(s string) *StudentUpdate {
	su.mutation.SetFirstName(s)
	return su
}

// SetGrade sets the "grade" field.
func (su *StudentUpdate) SetGrade(i int16) *StudentUpdate {
	su.mutation.ResetGrade()
	su.mutation.SetGrade(i)
	return su
}

// AddGrade adds i to the "grade" field.
func (su *StudentUpdate) AddGrade(i int16) *StudentUpdate {
	su.mutation.AddGrade(i)
	return su
}

// SetIsHighSchool sets the "is_high_school" field.
func (su *StudentUpdate) SetIsHighSchool(b bool) *StudentUpdate {
	su.mutation.SetIsHighSchool(b)
	return su
}

// SetNillableIsHighSchool sets the "is_high_school" field if the given value is not nil.
func (su *StudentUpdate) SetNillableIsHighSchool(b *bool) *StudentUpdate {
	if b != nil {
		su.SetIsHighSchool(*b)
	}
	return su
}

// SetManavisCode sets the "manavis_code" field.
func (su *StudentUpdate) SetManavisCode(s string) *StudentUpdate {
	su.mutation.SetManavisCode(s)
	return su
}

// AddCheckinIDs adds the "checkins" edge to the StudentCheckin entity by IDs.
func (su *StudentUpdate) AddCheckinIDs(ids ...uuid.UUID) *StudentUpdate {
	su.mutation.AddCheckinIDs(ids...)
	return su
}

// AddCheckins adds the "checkins" edges to the StudentCheckin entity.
func (su *StudentUpdate) AddCheckins(s ...*StudentCheckin) *StudentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddCheckinIDs(ids...)
}

// AddCheckoutIDs adds the "checkouts" edge to the StudentCheckout entity by IDs.
func (su *StudentUpdate) AddCheckoutIDs(ids ...uuid.UUID) *StudentUpdate {
	su.mutation.AddCheckoutIDs(ids...)
	return su
}

// AddCheckouts adds the "checkouts" edges to the StudentCheckout entity.
func (su *StudentUpdate) AddCheckouts(s ...*StudentCheckout) *StudentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddCheckoutIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// ClearCheckins clears all "checkins" edges to the StudentCheckin entity.
func (su *StudentUpdate) ClearCheckins() *StudentUpdate {
	su.mutation.ClearCheckins()
	return su
}

// RemoveCheckinIDs removes the "checkins" edge to StudentCheckin entities by IDs.
func (su *StudentUpdate) RemoveCheckinIDs(ids ...uuid.UUID) *StudentUpdate {
	su.mutation.RemoveCheckinIDs(ids...)
	return su
}

// RemoveCheckins removes "checkins" edges to StudentCheckin entities.
func (su *StudentUpdate) RemoveCheckins(s ...*StudentCheckin) *StudentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveCheckinIDs(ids...)
}

// ClearCheckouts clears all "checkouts" edges to the StudentCheckout entity.
func (su *StudentUpdate) ClearCheckouts() *StudentUpdate {
	su.mutation.ClearCheckouts()
	return su
}

// RemoveCheckoutIDs removes the "checkouts" edge to StudentCheckout entities by IDs.
func (su *StudentUpdate) RemoveCheckoutIDs(ids ...uuid.UUID) *StudentUpdate {
	su.mutation.RemoveCheckoutIDs(ids...)
	return su
}

// RemoveCheckouts removes "checkouts" edges to StudentCheckout entities.
func (su *StudentUpdate) RemoveCheckouts(s ...*StudentCheckout) *StudentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveCheckoutIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StudentUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	if _, ok := su.mutation.DeletedAt(); !ok {
		v := student.UpdateDefaultDeletedAt()
		su.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudentUpdate) check() error {
	if v, ok := su.mutation.LastName(); ok {
		if err := student.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Student.last_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Grade(); ok {
		if err := student.GradeValidator(v); err != nil {
			return &ValidationError{Name: "grade", err: fmt.Errorf(`ent: validator failed for field "Student.grade": %w`, err)}
		}
	}
	if v, ok := su.mutation.ManavisCode(); ok {
		if err := student.ManavisCodeValidator(v); err != nil {
			return &ValidationError{Name: "manavis_code", err: fmt.Errorf(`ent: validator failed for field "Student.manavis_code": %w`, err)}
		}
	}
	return nil
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if value, ok := su.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := su.mutation.Grade(); ok {
		_spec.SetField(student.FieldGrade, field.TypeInt16, value)
	}
	if value, ok := su.mutation.AddedGrade(); ok {
		_spec.AddField(student.FieldGrade, field.TypeInt16, value)
	}
	if value, ok := su.mutation.IsHighSchool(); ok {
		_spec.SetField(student.FieldIsHighSchool, field.TypeBool, value)
	}
	if value, ok := su.mutation.ManavisCode(); ok {
		_spec.SetField(student.FieldManavisCode, field.TypeString, value)
	}
	if su.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCheckinsIDs(); len(nodes) > 0 && !su.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !su.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StudentUpdateOne) SetUpdatedAt(t time.Time) *StudentUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StudentUpdateOne) SetDeletedAt(t time.Time) *StudentUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetLastName sets the "last_name" field.
func (suo *StudentUpdateOne) SetLastName(s string) *StudentUpdateOne {
	suo.mutation.SetLastName(s)
	return suo
}

// SetFirstName sets the "first_name" field.
func (suo *StudentUpdateOne) SetFirstName(s string) *StudentUpdateOne {
	suo.mutation.SetFirstName(s)
	return suo
}

// SetGrade sets the "grade" field.
func (suo *StudentUpdateOne) SetGrade(i int16) *StudentUpdateOne {
	suo.mutation.ResetGrade()
	suo.mutation.SetGrade(i)
	return suo
}

// AddGrade adds i to the "grade" field.
func (suo *StudentUpdateOne) AddGrade(i int16) *StudentUpdateOne {
	suo.mutation.AddGrade(i)
	return suo
}

// SetIsHighSchool sets the "is_high_school" field.
func (suo *StudentUpdateOne) SetIsHighSchool(b bool) *StudentUpdateOne {
	suo.mutation.SetIsHighSchool(b)
	return suo
}

// SetNillableIsHighSchool sets the "is_high_school" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableIsHighSchool(b *bool) *StudentUpdateOne {
	if b != nil {
		suo.SetIsHighSchool(*b)
	}
	return suo
}

// SetManavisCode sets the "manavis_code" field.
func (suo *StudentUpdateOne) SetManavisCode(s string) *StudentUpdateOne {
	suo.mutation.SetManavisCode(s)
	return suo
}

// AddCheckinIDs adds the "checkins" edge to the StudentCheckin entity by IDs.
func (suo *StudentUpdateOne) AddCheckinIDs(ids ...uuid.UUID) *StudentUpdateOne {
	suo.mutation.AddCheckinIDs(ids...)
	return suo
}

// AddCheckins adds the "checkins" edges to the StudentCheckin entity.
func (suo *StudentUpdateOne) AddCheckins(s ...*StudentCheckin) *StudentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddCheckinIDs(ids...)
}

// AddCheckoutIDs adds the "checkouts" edge to the StudentCheckout entity by IDs.
func (suo *StudentUpdateOne) AddCheckoutIDs(ids ...uuid.UUID) *StudentUpdateOne {
	suo.mutation.AddCheckoutIDs(ids...)
	return suo
}

// AddCheckouts adds the "checkouts" edges to the StudentCheckout entity.
func (suo *StudentUpdateOne) AddCheckouts(s ...*StudentCheckout) *StudentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddCheckoutIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// ClearCheckins clears all "checkins" edges to the StudentCheckin entity.
func (suo *StudentUpdateOne) ClearCheckins() *StudentUpdateOne {
	suo.mutation.ClearCheckins()
	return suo
}

// RemoveCheckinIDs removes the "checkins" edge to StudentCheckin entities by IDs.
func (suo *StudentUpdateOne) RemoveCheckinIDs(ids ...uuid.UUID) *StudentUpdateOne {
	suo.mutation.RemoveCheckinIDs(ids...)
	return suo
}

// RemoveCheckins removes "checkins" edges to StudentCheckin entities.
func (suo *StudentUpdateOne) RemoveCheckins(s ...*StudentCheckin) *StudentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveCheckinIDs(ids...)
}

// ClearCheckouts clears all "checkouts" edges to the StudentCheckout entity.
func (suo *StudentUpdateOne) ClearCheckouts() *StudentUpdateOne {
	suo.mutation.ClearCheckouts()
	return suo
}

// RemoveCheckoutIDs removes the "checkouts" edge to StudentCheckout entities by IDs.
func (suo *StudentUpdateOne) RemoveCheckoutIDs(ids ...uuid.UUID) *StudentUpdateOne {
	suo.mutation.RemoveCheckoutIDs(ids...)
	return suo
}

// RemoveCheckouts removes "checkouts" edges to StudentCheckout entities.
func (suo *StudentUpdateOne) RemoveCheckouts(s ...*StudentCheckout) *StudentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveCheckoutIDs(ids...)
}

// Where appends a list predicates to the StudentUpdate builder.
func (suo *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Student entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StudentUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	if _, ok := suo.mutation.DeletedAt(); !ok {
		v := student.UpdateDefaultDeletedAt()
		suo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudentUpdateOne) check() error {
	if v, ok := suo.mutation.LastName(); ok {
		if err := student.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Student.last_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Grade(); ok {
		if err := student.GradeValidator(v); err != nil {
			return &ValidationError{Name: "grade", err: fmt.Errorf(`ent: validator failed for field "Student.grade": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ManavisCode(); ok {
		if err := student.ManavisCodeValidator(v); err != nil {
			return &ValidationError{Name: "manavis_code", err: fmt.Errorf(`ent: validator failed for field "Student.manavis_code": %w`, err)}
		}
	}
	return nil
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if value, ok := suo.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Grade(); ok {
		_spec.SetField(student.FieldGrade, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.AddedGrade(); ok {
		_spec.AddField(student.FieldGrade, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.IsHighSchool(); ok {
		_spec.SetField(student.FieldIsHighSchool, field.TypeBool, value)
	}
	if value, ok := suo.mutation.ManavisCode(); ok {
		_spec.SetField(student.FieldManavisCode, field.TypeString, value)
	}
	if suo.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCheckinsIDs(); len(nodes) > 0 && !suo.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckinsTable,
			Columns: []string{student.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckin.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !suo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.CheckoutsTable,
			Columns: []string{student.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studentcheckout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hellovis/ent/predicate"
	"hellovis/ent/student"
	"hellovis/ent/studentcheckin"
	"hellovis/ent/studentcheckout"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStudent         = "Student"
	TypeStudentCheckin  = "StudentCheckin"
	TypeStudentCheckout = "StudentCheckout"
)

// StudentMutation represents an operation that mutates the Student nodes in the graph.
type StudentMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	last_name        *string
	first_name       *string
	grade            *int16
	addgrade         *int16
	is_high_school   *bool
	manavis_code     *string
	clearedFields    map[string]struct{}
	checkins         map[uuid.UUID]struct{}
	removedcheckins  map[uuid.UUID]struct{}
	clearedcheckins  bool
	checkouts        map[uuid.UUID]struct{}
	removedcheckouts map[uuid.UUID]struct{}
	clearedcheckouts bool
	done             bool
	oldValue         func(context.Context) (*Student, error)
	predicates       []predicate.Student
}

var _ ent.Mutation = (*StudentMutation)(nil)

// studentOption allows management of the mutation configuration using functional options.
type studentOption func(*StudentMutation)

// newStudentMutation creates new mutation for the Student entity.
func newStudentMutation(c config, op Op, opts ...studentOption) *StudentMutation {
	m := &StudentMutation{
		config:        c,
		op:            op,
		typ:           TypeStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentID sets the ID field of the mutation.
func withStudentID(id uuid.UUID) studentOption {
	return func(m *StudentMutation) {
		var (
			err   error
			once  sync.Once
			value *Student
		)
		m.oldValue = func(ctx context.Context) (*Student, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Student.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudent sets the old Student of the mutation.
func withStudent(node *Student) studentOption {
	return func(m *StudentMutation) {
		m.oldValue = func(context.Context) (*Student, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Student entities.
func (m *StudentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Student.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StudentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StudentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StudentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StudentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StudentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StudentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *StudentMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *StudentMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *StudentMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetLastName sets the "last_name" field.
func (m *StudentMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *StudentMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *StudentMutation) ResetLastName() {
	m.last_name = nil
}

// SetFirstName sets the "first_name" field.
func (m *StudentMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *StudentMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *StudentMutation) ResetFirstName() {
	m.first_name = nil
}

// SetGrade sets the "grade" field.
func (m *StudentMutation) SetGrade(i int16) {
	m.grade = &i
	m.addgrade = nil
}

// Grade returns the value of the "grade" field in the mutation.
func (m *StudentMutation) Grade() (r int16, exists bool) {
	v := m.grade
	if v == nil {
		return
	}
	return *v, true
}

// OldGrade returns the old "grade" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldGrade(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrade is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrade requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrade: %w", err)
	}
	return oldValue.Grade, nil
}

// AddGrade adds i to the "grade" field.
func (m *StudentMutation) AddGrade(i int16) {
	if m.addgrade != nil {
		*m.addgrade += i
	} else {
		m.addgrade = &i
	}
}

// AddedGrade returns the value that was added to the "grade" field in this mutation.
func (m *StudentMutation) AddedGrade() (r int16, exists bool) {
	v := m.addgrade
	if v == nil {
		return
	}
	return *v, true
}

// ResetGrade resets all changes to the "grade" field.
func (m *StudentMutation) ResetGrade() {
	m.grade = nil
	m.addgrade = nil
}

// SetIsHighSchool sets the "is_high_school" field.
func (m *StudentMutation) SetIsHighSchool(b bool) {
	m.is_high_school = &b
}

// IsHighSchool returns the value of the "is_high_school" field in the mutation.
func (m *StudentMutation) IsHighSchool() (r bool, exists bool) {
	v := m.is_high_school
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHighSchool returns the old "is_high_school" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldIsHighSchool(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHighSchool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHighSchool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHighSchool: %w", err)
	}
	return oldValue.IsHighSchool, nil
}

// ResetIsHighSchool resets all changes to the "is_high_school" field.
func (m *StudentMutation) ResetIsHighSchool() {
	m.is_high_school = nil
}

// SetManavisCode sets the "manavis_code" field.
func (m *StudentMutation) SetManavisCode(s string) {
	m.manavis_code = &s
}

// ManavisCode returns the value of the "manavis_code" field in the mutation.
func (m *StudentMutation) ManavisCode() (r string, exists bool) {
	v := m.manavis_code
	if v == nil {
		return
	}
	return *v, true
}

// OldManavisCode returns the old "manavis_code" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldManavisCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManavisCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManavisCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManavisCode: %w", err)
	}
	return oldValue.ManavisCode, nil
}

// ResetManavisCode resets all changes to the "manavis_code" field.
func (m *StudentMutation) ResetManavisCode() {
	m.manavis_code = nil
}

// AddCheckinIDs adds the "checkins" edge to the StudentCheckin entity by ids.
func (m *StudentMutation) AddCheckinIDs(ids ...uuid.UUID) {
	if m.checkins == nil {
		m.checkins = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.checkins[ids[i]] = struct{}{}
	}
}

// ClearCheckins clears the "checkins" edge to the StudentCheckin entity.
func (m *StudentMutation) ClearCheckins() {
	m.clearedcheckins = true
}

// CheckinsCleared reports if the "checkins" edge to the StudentCheckin entity was cleared.
func (m *StudentMutation) CheckinsCleared() bool {
	return m.clearedcheckins
}

// RemoveCheckinIDs removes the "checkins" edge to the StudentCheckin entity by IDs.
func (m *StudentMutation) RemoveCheckinIDs(ids ...uuid.UUID) {
	if m.removedcheckins == nil {
		m.removedcheckins = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.checkins, ids[i])
		m.removedcheckins[ids[i]] = struct{}{}
	}
}

// RemovedCheckins returns the removed IDs of the "checkins" edge to the StudentCheckin entity.
func (m *StudentMutation) RemovedCheckinsIDs() (ids []uuid.UUID) {
	for id := range m.removedcheckins {
		ids = append(ids, id)
	}
	return
}

// CheckinsIDs returns the "checkins" edge IDs in the mutation.
func (m *StudentMutation) CheckinsIDs() (ids []uuid.UUID) {
	for id := range m.checkins {
		ids = append(ids, id)
	}
	return
}

// ResetCheckins resets all changes to the "checkins" edge.
func (m *StudentMutation) ResetCheckins() {
	m.checkins = nil
	m.clearedcheckins = false
	m.removedcheckins = nil
}

// AddCheckoutIDs adds the "checkouts" edge to the StudentCheckout entity by ids.
func (m *StudentMutation) AddCheckoutIDs(ids ...uuid.UUID) {
	if m.checkouts == nil {
		m.checkouts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.checkouts[ids[i]] = struct{}{}
	}
}

// ClearCheckouts clears the "checkouts" edge to the StudentCheckout entity.
func (m *StudentMutation) ClearCheckouts() {
	m.clearedcheckouts = true
}

// CheckoutsCleared reports if the "checkouts" edge to the StudentCheckout entity was cleared.
func (m *StudentMutation) CheckoutsCleared() bool {
	return m.clearedcheckouts
}

// RemoveCheckoutIDs removes the "checkouts" edge to the StudentCheckout entity by IDs.
func (m *StudentMutation) RemoveCheckoutIDs(ids ...uuid.UUID) {
	if m.removedcheckouts == nil {
		m.removedcheckouts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.checkouts, ids[i])
		m.removedcheckouts[ids[i]] = struct{}{}
	}
}

// RemovedCheckouts returns the removed IDs of the "checkouts" edge to the StudentCheckout entity.
func (m *StudentMutation) RemovedCheckoutsIDs() (ids []uuid.UUID) {
	for id := range m.removedcheckouts {
		ids = append(ids, id)
	}
	return
}

// CheckoutsIDs returns the "checkouts" edge IDs in the mutation.
func (m *StudentMutation) CheckoutsIDs() (ids []uuid.UUID) {
	for id := range m.checkouts {
		ids = append(ids, id)
	}
	return
}

// ResetCheckouts resets all changes to the "checkouts" edge.
func (m *StudentMutation) ResetCheckouts() {
	m.checkouts = nil
	m.clearedcheckouts = false
	m.removedcheckouts = nil
}

// Where appends a list predicates to the StudentMutation builder.
func (m *StudentMutation) Where(ps ...predicate.Student) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Student, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Student).
func (m *StudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, student.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, student.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, student.FieldDeletedAt)
	}
	if m.last_name != nil {
		fields = append(fields, student.FieldLastName)
	}
	if m.first_name != nil {
		fields = append(fields, student.FieldFirstName)
	}
	if m.grade != nil {
		fields = append(fields, student.FieldGrade)
	}
	if m.is_high_school != nil {
		fields = append(fields, student.FieldIsHighSchool)
	}
	if m.manavis_code != nil {
		fields = append(fields, student.FieldManavisCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case student.FieldCreatedAt:
		return m.CreatedAt()
	case student.FieldUpdatedAt:
		return m.UpdatedAt()
	case student.FieldDeletedAt:
		return m.DeletedAt()
	case student.FieldLastName:
		return m.LastName()
	case student.FieldFirstName:
		return m.FirstName()
	case student.FieldGrade:
		return m.Grade()
	case student.FieldIsHighSchool:
		return m.IsHighSchool()
	case student.FieldManavisCode:
		return m.ManavisCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case student.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case student.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case student.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case student.FieldLastName:
		return m.OldLastName(ctx)
	case student.FieldFirstName:
		return m.OldFirstName(ctx)
	case student.FieldGrade:
		return m.OldGrade(ctx)
	case student.FieldIsHighSchool:
		return m.OldIsHighSchool(ctx)
	case student.FieldManavisCode:
		return m.OldManavisCode(ctx)
	}
	return nil, fmt.Errorf("unknown Student field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case student.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case student.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case student.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case student.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case student.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case student.FieldGrade:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrade(v)
		return nil
	case student.FieldIsHighSchool:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHighSchool(v)
		return nil
	case student.FieldManavisCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManavisCode(v)
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentMutation) AddedFields() []string {
	var fields []string
	if m.addgrade != nil {
		fields = append(fields, student.FieldGrade)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case student.FieldGrade:
		return m.AddedGrade()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case student.FieldGrade:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrade(v)
		return nil
	}
	return fmt.Errorf("unknown Student numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Student nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentMutation) ResetField(name string) error {
	switch name {
	case student.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case student.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case student.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case student.FieldLastName:
		m.ResetLastName()
		return nil
	case student.FieldFirstName:
		m.ResetFirstName()
		return nil
	case student.FieldGrade:
		m.ResetGrade()
		return nil
	case student.FieldIsHighSchool:
		m.ResetIsHighSchool()
		return nil
	case student.FieldManavisCode:
		m.ResetManavisCode()
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.checkins != nil {
		edges = append(edges, student.EdgeCheckins)
	}
	if m.checkouts != nil {
		edges = append(edges, student.EdgeCheckouts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeCheckins:
		ids := make([]ent.Value, 0, len(m.checkins))
		for id := range m.checkins {
			ids = append(ids, id)
		}
		return ids
	case student.EdgeCheckouts:
		ids := make([]ent.Value, 0, len(m.checkouts))
		for id := range m.checkouts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcheckins != nil {
		edges = append(edges, student.EdgeCheckins)
	}
	if m.removedcheckouts != nil {
		edges = append(edges, student.EdgeCheckouts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeCheckins:
		ids := make([]ent.Value, 0, len(m.removedcheckins))
		for id := range m.removedcheckins {
			ids = append(ids, id)
		}
		return ids
	case student.EdgeCheckouts:
		ids := make([]ent.Value, 0, len(m.removedcheckouts))
		for id := range m.removedcheckouts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcheckins {
		edges = append(edges, student.EdgeCheckins)
	}
	if m.clearedcheckouts {
		edges = append(edges, student.EdgeCheckouts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentMutation) EdgeCleared(name string) bool {
	switch name {
	case student.EdgeCheckins:
		return m.clearedcheckins
	case student.EdgeCheckouts:
		return m.clearedcheckouts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Student unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentMutation) ResetEdge(name string) error {
	switch name {
	case student.EdgeCheckins:
		m.ResetCheckins()
		return nil
	case student.EdgeCheckouts:
		m.ResetCheckouts()
		return nil
	}
	return fmt.Errorf("unknown Student edge %s", name)
}

// StudentCheckinMutation represents an operation that mutates the StudentCheckin nodes in the graph.
type StudentCheckinMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	checkin_at     *time.Time
	clearedFields  map[string]struct{}
	student        *uuid.UUID
	clearedstudent bool
	done           bool
	oldValue       func(context.Context) (*StudentCheckin, error)
	predicates     []predicate.StudentCheckin
}

var _ ent.Mutation = (*StudentCheckinMutation)(nil)

// studentcheckinOption allows management of the mutation configuration using functional options.
type studentcheckinOption func(*StudentCheckinMutation)

// newStudentCheckinMutation creates new mutation for the StudentCheckin entity.
func newStudentCheckinMutation(c config, op Op, opts ...studentcheckinOption) *StudentCheckinMutation {
	m := &StudentCheckinMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentCheckin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentCheckinID sets the ID field of the mutation.
func withStudentCheckinID(id uuid.UUID) studentcheckinOption {
	return func(m *StudentCheckinMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentCheckin
		)
		m.oldValue = func(ctx context.Context) (*StudentCheckin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentCheckin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentCheckin sets the old StudentCheckin of the mutation.
func withStudentCheckin(node *StudentCheckin) studentcheckinOption {
	return func(m *StudentCheckinMutation) {
		m.oldValue = func(context.Context) (*StudentCheckin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentCheckinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentCheckinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudentCheckin entities.
func (m *StudentCheckinMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentCheckinMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentCheckinMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentCheckin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StudentCheckinMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StudentCheckinMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StudentCheckin entity.
// If the StudentCheckin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckinMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StudentCheckinMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StudentCheckinMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StudentCheckinMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StudentCheckin entity.
// If the StudentCheckin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckinMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StudentCheckinMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *StudentCheckinMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *StudentCheckinMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the StudentCheckin entity.
// If the StudentCheckin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckinMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *StudentCheckinMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetStudentID sets the "student_id" field.
func (m *StudentCheckinMutation) SetStudentID(u uuid.UUID) {
	m.student = &u
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *StudentCheckinMutation) StudentID() (r uuid.UUID, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the StudentCheckin entity.
// If the StudentCheckin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckinMutation) OldStudentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *StudentCheckinMutation) ResetStudentID() {
	m.student = nil
}

// SetCheckinAt sets the "checkin_at" field.
func (m *StudentCheckinMutation) SetCheckinAt(t time.Time) {
	m.checkin_at = &t
}

// CheckinAt returns the value of the "checkin_at" field in the mutation.
func (m *StudentCheckinMutation) CheckinAt() (r time.Time, exists bool) {
	v := m.checkin_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckinAt returns the old "checkin_at" field's value of the StudentCheckin entity.
// If the StudentCheckin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckinMutation) OldCheckinAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckinAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckinAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckinAt: %w", err)
	}
	return oldValue.CheckinAt, nil
}

// ResetCheckinAt resets all changes to the "checkin_at" field.
func (m *StudentCheckinMutation) ResetCheckinAt() {
	m.checkin_at = nil
}

// ClearStudent clears the "student" edge to the Student entity.
func (m *StudentCheckinMutation) ClearStudent() {
	m.clearedstudent = true
}

// StudentCleared reports if the "student" edge to the Student entity was cleared.
func (m *StudentCheckinMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *StudentCheckinMutation) StudentIDs() (ids []uuid.UUID) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *StudentCheckinMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// Where appends a list predicates to the StudentCheckinMutation builder.
func (m *StudentCheckinMutation) Where(ps ...predicate.StudentCheckin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentCheckinMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentCheckinMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StudentCheckin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentCheckinMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentCheckinMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StudentCheckin).
func (m *StudentCheckinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentCheckinMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, studentcheckin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, studentcheckin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, studentcheckin.FieldDeletedAt)
	}
	if m.student != nil {
		fields = append(fields, studentcheckin.FieldStudentID)
	}
	if m.checkin_at != nil {
		fields = append(fields, studentcheckin.FieldCheckinAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentCheckinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studentcheckin.FieldCreatedAt:
		return m.CreatedAt()
	case studentcheckin.FieldUpdatedAt:
		return m.UpdatedAt()
	case studentcheckin.FieldDeletedAt:
		return m.DeletedAt()
	case studentcheckin.FieldStudentID:
		return m.StudentID()
	case studentcheckin.FieldCheckinAt:
		return m.CheckinAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentCheckinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studentcheckin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case studentcheckin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case studentcheckin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case studentcheckin.FieldStudentID:
		return m.OldStudentID(ctx)
	case studentcheckin.FieldCheckinAt:
		return m.OldCheckinAt(ctx)
	}
	return nil, fmt.Errorf("unknown StudentCheckin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentCheckinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studentcheckin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case studentcheckin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case studentcheckin.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case studentcheckin.FieldStudentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case studentcheckin.FieldCheckinAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckinAt(v)
		return nil
	}
	return fmt.Errorf("unknown StudentCheckin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentCheckinMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentCheckinMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentCheckinMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentCheckin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentCheckinMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentCheckinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentCheckinMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentCheckin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentCheckinMutation) ResetField(name string) error {
	switch name {
	case studentcheckin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case studentcheckin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case studentcheckin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case studentcheckin.FieldStudentID:
		m.ResetStudentID()
		return nil
	case studentcheckin.FieldCheckinAt:
		m.ResetCheckinAt()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentCheckinMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.student != nil {
		edges = append(edges, studentcheckin.EdgeStudent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentCheckinMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentcheckin.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentCheckinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentCheckinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentCheckinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstudent {
		edges = append(edges, studentcheckin.EdgeStudent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentCheckinMutation) EdgeCleared(name string) bool {
	switch name {
	case studentcheckin.EdgeStudent:
		return m.clearedstudent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentCheckinMutation) ClearEdge(name string) error {
	switch name {
	case studentcheckin.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentCheckinMutation) ResetEdge(name string) error {
	switch name {
	case studentcheckin.EdgeStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckin edge %s", name)
}

// StudentCheckoutMutation represents an operation that mutates the StudentCheckout nodes in the graph.
type StudentCheckoutMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	checkout_at    *time.Time
	clearedFields  map[string]struct{}
	student        *uuid.UUID
	clearedstudent bool
	done           bool
	oldValue       func(context.Context) (*StudentCheckout, error)
	predicates     []predicate.StudentCheckout
}

var _ ent.Mutation = (*StudentCheckoutMutation)(nil)

// studentcheckoutOption allows management of the mutation configuration using functional options.
type studentcheckoutOption func(*StudentCheckoutMutation)

// newStudentCheckoutMutation creates new mutation for the StudentCheckout entity.
func newStudentCheckoutMutation(c config, op Op, opts ...studentcheckoutOption) *StudentCheckoutMutation {
	m := &StudentCheckoutMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentCheckout,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentCheckoutID sets the ID field of the mutation.
func withStudentCheckoutID(id uuid.UUID) studentcheckoutOption {
	return func(m *StudentCheckoutMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentCheckout
		)
		m.oldValue = func(ctx context.Context) (*StudentCheckout, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentCheckout.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentCheckout sets the old StudentCheckout of the mutation.
func withStudentCheckout(node *StudentCheckout) studentcheckoutOption {
	return func(m *StudentCheckoutMutation) {
		m.oldValue = func(context.Context) (*StudentCheckout, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentCheckoutMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentCheckoutMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudentCheckout entities.
func (m *StudentCheckoutMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentCheckoutMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentCheckoutMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentCheckout.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StudentCheckoutMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StudentCheckoutMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StudentCheckout entity.
// If the StudentCheckout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckoutMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StudentCheckoutMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StudentCheckoutMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StudentCheckoutMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StudentCheckout entity.
// If the StudentCheckout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckoutMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StudentCheckoutMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *StudentCheckoutMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *StudentCheckoutMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the StudentCheckout entity.
// If the StudentCheckout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckoutMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *StudentCheckoutMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetStudentID sets the "student_id" field.
func (m *StudentCheckoutMutation) SetStudentID(u uuid.UUID) {
	m.student = &u
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *StudentCheckoutMutation) StudentID() (r uuid.UUID, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the StudentCheckout entity.
// If the StudentCheckout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckoutMutation) OldStudentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *StudentCheckoutMutation) ResetStudentID() {
	m.student = nil
}

// SetCheckoutAt sets the "checkout_at" field.
func (m *StudentCheckoutMutation) SetCheckoutAt(t time.Time) {
	m.checkout_at = &t
}

// CheckoutAt returns the value of the "checkout_at" field in the mutation.
func (m *StudentCheckoutMutation) CheckoutAt() (r time.Time, exists bool) {
	v := m.checkout_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckoutAt returns the old "checkout_at" field's value of the StudentCheckout entity.
// If the StudentCheckout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentCheckoutMutation) OldCheckoutAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckoutAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckoutAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckoutAt: %w", err)
	}
	return oldValue.CheckoutAt, nil
}

// ResetCheckoutAt resets all changes to the "checkout_at" field.
func (m *StudentCheckoutMutation) ResetCheckoutAt() {
	m.checkout_at = nil
}

// ClearStudent clears the "student" edge to the Student entity.
func (m *StudentCheckoutMutation) ClearStudent() {
	m.clearedstudent = true
}

// StudentCleared reports if the "student" edge to the Student entity was cleared.
func (m *StudentCheckoutMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *StudentCheckoutMutation) StudentIDs() (ids []uuid.UUID) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *StudentCheckoutMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// Where appends a list predicates to the StudentCheckoutMutation builder.
func (m *StudentCheckoutMutation) Where(ps ...predicate.StudentCheckout) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentCheckoutMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentCheckoutMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StudentCheckout, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentCheckoutMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentCheckoutMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StudentCheckout).
func (m *StudentCheckoutMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentCheckoutMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, studentcheckout.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, studentcheckout.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, studentcheckout.FieldDeletedAt)
	}
	if m.student != nil {
		fields = append(fields, studentcheckout.FieldStudentID)
	}
	if m.checkout_at != nil {
		fields = append(fields, studentcheckout.FieldCheckoutAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentCheckoutMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studentcheckout.FieldCreatedAt:
		return m.CreatedAt()
	case studentcheckout.FieldUpdatedAt:
		return m.UpdatedAt()
	case studentcheckout.FieldDeletedAt:
		return m.DeletedAt()
	case studentcheckout.FieldStudentID:
		return m.StudentID()
	case studentcheckout.FieldCheckoutAt:
		return m.CheckoutAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentCheckoutMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studentcheckout.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case studentcheckout.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case studentcheckout.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case studentcheckout.FieldStudentID:
		return m.OldStudentID(ctx)
	case studentcheckout.FieldCheckoutAt:
		return m.OldCheckoutAt(ctx)
	}
	return nil, fmt.Errorf("unknown StudentCheckout field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentCheckoutMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studentcheckout.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case studentcheckout.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case studentcheckout.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case studentcheckout.FieldStudentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case studentcheckout.FieldCheckoutAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckoutAt(v)
		return nil
	}
	return fmt.Errorf("unknown StudentCheckout field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentCheckoutMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentCheckoutMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentCheckoutMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentCheckout numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentCheckoutMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentCheckoutMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentCheckoutMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentCheckout nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentCheckoutMutation) ResetField(name string) error {
	switch name {
	case studentcheckout.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case studentcheckout.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case studentcheckout.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case studentcheckout.FieldStudentID:
		m.ResetStudentID()
		return nil
	case studentcheckout.FieldCheckoutAt:
		m.ResetCheckoutAt()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckout field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentCheckoutMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.student != nil {
		edges = append(edges, studentcheckout.EdgeStudent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentCheckoutMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentcheckout.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentCheckoutMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentCheckoutMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentCheckoutMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstudent {
		edges = append(edges, studentcheckout.EdgeStudent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentCheckoutMutation) EdgeCleared(name string) bool {
	switch name {
	case studentcheckout.EdgeStudent:
		return m.clearedstudent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentCheckoutMutation) ClearEdge(name string) error {
	switch name {
	case studentcheckout.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckout unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentCheckoutMutation) ResetEdge(name string) error {
	switch name {
	case studentcheckout.EdgeStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown StudentCheckout edge %s", name)
}
